def nreinas(N):
    """
    Args:
        N: Tamaño del tablero (1 ≤ N ≤ 8)
    
    Returns:
        Lista P donde P[i] indica la fila de la reina en la columna i
    """
    
    def no_conflictos(tablero, actual):
        """
        Verifica que no hay conflictos con las reinas ya colocadas
        """
        for i in range(actual):
            # Misma fila
            if tablero[i] == tablero[actual]:
                return False
            # Misma diagonal (diferencia entre filas == diferencia entre columnas)
            if actual - i == abs(tablero[actual] - tablero[i]):
                return False
        return True
    
    def dfs(tablero, actual, tamaño):
        """
        Función DFS recursiva para colocar reinas
        """
        # Si todas las reinas están colocadas
        if actual == tamaño:
            return True
        
        # Intentar colocar la reina en todas las filas de esta columna
        for i in range(tamaño):
            tablero[actual] = i
            if no_conflictos(tablero, actual):
                # Si no hay conflictos, colocar la siguiente reina
                hecho = dfs(tablero, actual + 1, tamaño)
                if hecho:
                    return True
        
        return False
    
    # Inicializar el tablero
    tablero = [-1] * N
    
    # Resolver el problema
    if dfs(tablero, 0, N):
        return tablero
    else:
        return None

def imprimir_tablero(solucion):
    """
    Imprime el tablero de forma visual
    """
    if solucion is None:
        print("No hay solución")
        return
    
    N = len(solucion)
    print("Solución:", solucion)
    print("Representación del tablero:")
    
    # Encabezado de columnas
    print("   " + " ".join(str(i) for i in range(N)))
    
    for fila in range(N):
        # Encontrar donde está la reina en esta fil
